
sysfs-file system provided by the Linux kernel that exports information about various kernel subsystems, hardware devices, and associated device drivers from the kernel's device model to user space through virtual files.Sysfs is used by several utilities to access information about hardware and its driver (kernel modules) such as udev or HAL
https://en.wikipedia.org/wiki/Sysfs

devicetree-data structure describing the hardware components of a particular computer so that the operating system's kernel can use and manage those components, including the CPU or CPUs, the memory, the buses and the peripherals.Personal computers with the x86 architecture generally do not use device trees, relying instead on various auto configuration protocols (e.g. ACPI) to discover hardware. Systems which use device trees usually pass a static device tree (perhaps stored in ROM) to the operating system, but can also generate a device tree in the early stages of booting. As an example, Das U-Boot and kexec can pass a device tree when launching a new operating system. On systems with a boot loader that does not support device trees, a static device tree may be installed along with the operating system; the Linux kernel supports this approach.The purpose is to move a significant part of the hardware description out of the kernel binary, and into the compiled device tree blob, which is handed to the kernel by the boot loader, replacing a range of board-specific C source files and compile-time options in the kernel.It is specified in a Devicetree Source file (.dts) and is compiled into a Devicetree Blob or device tree binary (.dtb) file through the Devicetree compiler (DTC). Device tree source files can include other files, referred to as device tree source includes
https://en.wikipedia.org/wiki/Devicetree

ACPI-Advanced Configuration and Power Interface (ACPI) provides an open standard that operating systems can use to discover and configure computer hardware components, to perform power management e.g. putting unused hardware components to sleep, to perform auto configuration e.g. Plug and Play and hot swapping, and to perform status monitoring.ACPI brings the power management under the control of the operating system, as opposed to the previous BIOS-centric system that relied on platform-specific firmware to determine power management and configuration policies.ACPI defines a hardware abstraction interface between the system firmware (BIOS or UEFI), the computer hardware components, and the operating systems.
https://en.wikipedia.org/wiki/Advanced_Configuration_and_Power_Interface
ACPI is a standard that allows the BIOS of the computer to work with the operating system in order to access the hardware in an indirect manner, in the hope of handling a wide range of devices with relatively little code specific to each operating system. ACPI also provides a facility to help suspend and resume a machine and control the speed of the processor and fans. If you have a laptop, it is recommended that you enable this option. 
pci devices-network cards,tv tuner cards,sound cards,modems,usb(universal serial bus) hard disk drive host adapters.they are distinguished by vendor and device  id

root filesystem -filesystem that the kernel boots the main portion of the running system. It contains all of the initial programs that start up the distro, and also usually contains the entire system configuration for the machine. In short, it is very important, and must be able to be found by the kernel at boot time in order for things to work properly If you are not using a ramdisk image at boot time, it is usually recommended that you build both the filesystem that you use for your root partition, and the disk controller for that disk, into the kernel, instead of having it as a module. If you use a ramdisk at boot time, then you should be safe building these portions as modules.Without the main block device, there is no way to access the individual partitions on that device

scsi-SCSI (Small Computer Systems Interface) is a smart bus, controlled with a microprocessor, that allows you to add up to 15 peripheral devices to the computer. These devices can include hard drives, scanners, printers, and other peripherals. High-end single SCSI boards have two controllers and support up to 30 peripherals on a single expansion card. An advantage of SCSI is that you can connect several peripherals to one host adapter, using only one slot in the bus.Generally used in servers,mainframes.SCSI is useful in network servers, where several hard drives can be easily set up as a RAID configuration. If one drive fails, it can be removed and a new one inserted, without loss of data, while the system is still operational. This feature of RAID hardware is called hot-swapping.You can install SCSI hard drives in a PC that already contains one or more IDE disk drives. The IDE drive will still be the boot drive, 
https://kb.iu.edu/d/aiqw

Integrated Drive Electronics (IDE)-a standard interface for connecting a motherboard to storage devices such as hard drives and CD-ROM/DVD drives. it contains two IDE device connections and two motherboard connectors for two data cables. An IDE-integrated controller sends an array of 512-byte blocks between the drive and motherboard, which houses up to four chipset-controlled IDE devices within one system.The hard drive uses one cable and connects to the motherboard via the primary IDE connector. The CD-ROM drive and other storage devices share one IDE cable.  
https://www.techopedia.com/definition/24399/integrated-drive-electronics--ide

a computer “drive”- also called a “disk drive,” is a device that stores digital information from your computer.drives are optical(using small laser beam store  and read 0 and 1s) and flash.“Flash” drives, sometimes called jump drives, thumb drives and USB drives, are also used to store digital files, but use “solid-state” memory technology, rather than moving parts like motors and spinning disks. “Solid-state drives” (SSDs) use the same method, storing their information on digital integrated circuits (sometimes called “chips”) containing millions or billions of microscopic transistors, which act as switches. These switches, whether in an “on” or “off” state, are what store and process the zeroes and ones used by all computers.
https://www.normantranscript.com/opinion/columns/what-is-a-computer-drive-anyway/article_989e91e3-f59a-5897-a561-c68e8b245860.html

USB Storage device-in reality a USB SCSI device that talks over a USB connection. Because of this, the SCSI subsystem must be enabled

SATA - type of disk controller that is the successor to the IDE disk controller

SMP (symmetric multiprocessing) is the processing of programs by multiple processors that share a common operating system and memory.
https://searchdatacenter.techtarget.com/definition/SMP#:~:text=SMP%20(symmetric%20multiprocessing)%20is%20the,common%20operating%20system%20and%20memory.&text=A%20single%20copy%20of%20the,not%20usually%20exceed%2016%20processors.

Time stamp counter-used to count cpu cycle which is a method to measure performance

Initrd- provides the capability to load a RAM disk by the boot loader. This RAM disk can then be mounted as the root file system and programs can be run from it
In computing (specifically as regards Linux computing), initrd (initial ramdisk) is a scheme for loading a temporary root file system into memory, which may be used as part of the Linux startup process. initrd and initramfs refer to two different methods of achieving this. Both are commonly used to make preparations before the real root file system can be mounted.
The initial RAM disk (initrd) is an initial root file system that is mounted prior to when the real root file system is available. The initrd is bound to the kernel and loaded as part of the kernel boot procedure. The kernel then mounts this initrd as part of the two-stage boot process to load the modules to make the real file systems available and get at the real root file system.
https://wiki.debian.org/Initrd


#communication
IrDA-infrared protocol used by a number of laptops and PDAs to communicate over very short distances. It is prevalent on older hardware, with newer hardware using Bluetooth to communicate instead.
Bluetooth - wireless technology that was created to replace IrDA to talk between devices over a very short distance. It is a short-range
 wireless technology that was designed as a replacement for cables and operates within a 10 meter radius 

#memory and address
logical address - generated by CPU during a programexecution.is also called as Virtual Address whose max range is 4 bytes in 32 bit,8bytes in 64bit systems
physical address-refers to a location in the memory unit.some of the addresses refer to hardware
address space-The range of virtual addresses that the operating system assigns to a user or separately running program is called an address space. This is the area of contiguous virtual addresses available for executing instructions and storing data. application's executable file is mapped into the VAS.
first off address are empty and when app kicks off exe file is mapped to vas,i.e.,addresses in the process VAS are mapped to bytes in the exe file.the only way the process can use or set '-' values in its VAS is to ask the OS to map them to bytes from a file.
A common way to use VAS memory in this way is to map it to the page file.To facilitate copying virtual memory into real memory, the operating system divides virtual memory into pagesEach page is stored on a diskuntil it is needed. When the page is needed, the operating system copies it from disk to main memory, translating the virtual addresses into real addresses.
The process of translating virtual addresses into real addresses is called mapping. The copying of virtual pages from disk to main memory is known as paging or swapping.Driver programs are allowed to access directly to real address generally
https://www.webopedia.com/definitions/virtual-memory/
https://en.wikipedia.org/wiki/Virtual_address_space
memory paging - memory management scheme by which a computer stores and retrieves data from secondary storage[a] for use in main memory.
https://en.wikipedia.org/wiki/Memory_paging
swapping - mechanism in which a process can be swapped temporarily out of main memory (or move) tosecondary storage (disk) and make that memory available to other processes. At some later time, the system swapsback the process from the secondary storage to main memory.Though performance is usually affected by swapping process but it helps in running multiple and big processes inparallel and that's the reason Swapping is also known as a technique for memory compaction
http://www.meerutcollege.org/mcm_admin/upload/1587052623.pdf
passing arguments to kernel - 
1)building kernel
2)starting kernel
3)at run-time,by writing files in the /proc and /sys directories
most are associated with subsystems and if subsystems exist they work.In addition to the options listed in this chapter, parameters for modules that are built in to the kernel can also be passed on the command line. (Dynamically loaded modules, of course, are not in memory when the kernel boots and therefore cannot be passed parameters at boot time.) The syntax for passing parameters consisting of the module name followed by a dot (.) and the parameter.Most module options for modules that are built into the kernel can also be changed at run time by writing to files in the subdirectory named after the module under the /sys/module/ directory. 

Interrupts - complex aspect of kernel behavior. The boot-time options deal mostly with the interface between the kernel and the hardware that handles interrupts, such as the Intel chip's Advanced Programmable Interrupt Controller (APIC).
irqbalance-The purpose of irqbalance is distribute hardware interrupts across processors on a multiprocessor system in order to increase performance.
noirqbalance — Disable kernel IRQ balancing.
irqfixup-When an interrupt is not handled, search all known interrupt handlers for it. This is intended to get systems with badly broken firmware running.



#interrupt options
apic-Control how much information the APIC subsystem generates when booting the kernel.
noapic — Do not use any IOAPICs.
lapic-Cause the kernel to enable the local APIC even if the BIOS had disabled it.
nolapic — Do not use the local APIC.

#memory options-The kernel handles memory in many different chunks and categories for different purposes. These options allow you to tweak the sizes and settings.
highmem-Force the highmem memory zone to have an exact size of n bytes. This will work even on boxes that have no highmem zones by default. It can also reduce the size of the highmem zone for machines with a lot of memory.
max_addr-Cause the kernel to ignore all physical memory greater than or equal to the physical address n
mem-Set the specific ammount of memory used by the kernel. When used with the memmap= option, physical address space collisions can be avoided. Without the memmap= option, this option could cause PCI devices to be placed at addresses that belong to unused RAM. n specifies the amount of memory to force and is measured in units of kilobytes (K), megabytes (M), or gigabytes (G).
mem — Disable the use of 4MB pages for kernel memory.
memmap — Force specific memory to be used.
Enable or disable the kernel's ability to map sections of memory as non-executable. By default, the mapping is enabled (on).
Force the kernel to ignore some of the I/O memory areas.
Force vmalloc to have the exact size specified by n . This can be used to increase the minimum size of the vmalloc area (which is 128 MB on the x86 processor). It can also be used to decrease the size and leave more room for directly mapped kernel RAM.

#suspend options-These options change the way the kernel handles suspension for power-saving purposes.
resume — Specify the partition device for the suspend image.
noresume — Disable resume.

#cpu options-These options control a wide range of behavior regarding timing, processor use in multi-processor systems, and other processor issues.
cachesize-Sometimes CPU hardware bugs make them report the cache size incorrectly. The kernel will attempt to work around and fix known problems with most CPUs, but for some CPUs it is not possible to determine what the correct size should be. This option provides an override for these situations.
nosmp-Tell an SMP kernel to act as a uniprocessor kernel, even on a multiprocessor machine.
notsc — Disable the time stamp counter.
max_cpus — Maximum number of CPUs to use.

#ramdisk options-These options control how the storage of information in memory to imitate disks (Ramdisks) is done, including init ramdisks that hold information necessary at some stages of booting.
initrd-Specify where the initial ramdisk for the kernel boot is located.
load_ramdisk — Load a kernel ramdisk from a floppy.If n is set to 1, a ramdisk is loaded by the kernel at boot time from the floppy drive.(load_ramdisk=n)
noinitrd — Do not use any initrd.
prompt_ramdisk-Prompt the user for the initial ramdisk before attempting to read it from the floppy drive.
ramdisk_blocksize-Tell the ramdisk driver how many bytes to use per block. The default size is 1024(ramdisk_blocksize=n)
ramdisk_size-Specify the size of the initial RAM disk in kilobytes. The default size is 4096 (4 MB).(ramdisk_size= n)








#cpu,cpu register
The CPU register stores memory addresses, which is how the processor accesses data from RAM. One bit in the register can reference an individual byte in memory, so a 32-bit system can address a maximum of 4 GB (4,294,967,296 bytes) of RAM. The actual limit is often less around 3.5 GB since part of the register is used to store other temporary values besides memory addresses. 
Using 64-bit one can do a lot in multi-tasking, user can easily switch between various applications without any windows hanging problems.A 32-bit system can access 232 memory addresses, i.e 4 GB of RAM or physical memory ideally, it can access more than 4 GB of RAM also. 
A 64-bit system can access 264 memory addresses, i.e actually 18-Quintillion bytes of RAM. In short, any amount of memory greater than 4 GB can be easily handled by it. 
https://www.geeksforgeeks.org/difference-32-bit-64-bit-operating-systems/
processor register - quickly accessible location available to a computer's processor. Registers usually consist of a small amount of fast storage, although some registers have specific hardware functions, and may be read-only or write-only.
Registers are normally measured by the number of bits they can hold, for example, an "8-bit register", "32-bit register" or a "64-bit register" or even more. In some instruction sets, the registers can operate in various modes breaking down its storage memory into smaller ones (32-bit into four 8-bit ones for instance) 
Types of registers:
.User-accessible registers can be read or written by machine instructions. The most common division of user-accessible registers is into data registers and address registers.
 .Data registers can hold numeric data values such as integer and, in some architectures, floating-point values, as well as characters, small bit arrays and other data. In some older and low end CPUs, a special data register, known as the accumulator, is used implicitly for many operations.
 .Address registers hold addresses and are used by instructions that indirectly access primary memory.
            Some processors contain registers that may only be used to hold an address or only to hold numeric values 
            (in some cases used as an index register whose value is added as an offset from some address); others allow registers to hold either kind of quantity. A wide variety of possible addressing modes, used to specify the effective address of an operand, exist.
            The stack pointer is used to manage the run-time stack. Rarely, other data stacks are addressed by dedicated address registers, see stack machine.
 .General-purpose registers (GPRs) can store both data and addresses, i.e., they are combined data/address registers; in some architectures, the register file is unified so that the GPRs can store floating-point numbers as well.
 .Status registers hold truth values often used to determine whether some instruction should or should not be executed.
 .Floating-point registers (FPRs) store floating point numbers in many architectures.
 .Constant registers hold read-only values such as zero, one, or pi.
 .Vector registers hold data for vector processing done by SIMD instructions (Single Instruction, Multiple Data).
 .Special-purpose registers (SPRs) hold program state; they usually include the program counter, also called the instruction pointer, and the status register; the program counter and status register might be combined in a program status word (PSW) register. 
 The aforementioned stack pointer is sometimes also included in this group. Embedded microprocessors can also have registers corresponding to specialized hardware elements.
        In some architectures, model-specific registers (also called machine-specific registers) store data and settings related to the processor itself. Because their meanings are attached to the design of a specific processor,
        they cannot be expected to remain standard between processor generations.
        Memory type range registers (MTRRs)
.Internal registers – registers not accessible by instructions, used internally for processor operations.
        Instruction register, holding the instruction currently being executed.
        Registers related to fetching information from RAM, a collection of storage registers located on separate chips from the CPU:
            Memory buffer register (MBR), also known as Memory data register (MDR)
            Memory address register (MAR)
.Architectural register - The registers visible to software defined by an architecture may not correspond to the physical hardware, if there is register renaming being performed by underlying hardware.

Hardware registers are similar, but occur outside CPUs. 
https://en.wikipedia.org/wiki/Processor_register
===================================================

/dev, /proc and /sys are “virtual (pseudo) filesystems” (not existing on harddisk, but only in RAM – so they do not consume any harddisk space and are completely created on boot).
/sys-doesn’t interact with individual processes, but the system and kernel as a whole.

/dev tree contains device nodes, which gives user space access to the device drivers in your OS’s running kernel.¹ All POSIX type OSes have a /dev tree.

/proc-tree originated in System V Unix, where it only gave information about each running process, using a /proc/$PID/stuff scheme. Linux greatly extended that, adding all sorts of information about the running kernel’s status. In addition to these read-only information files, Linux’s /proc also has writable virtual files that can change the state of the running kernel. BSD type OSes generally do not have /proc at all, so much of what you find under here is non-portable.The intended solution for this mess in Linux’s /proc is /sys. Ideally, all the non-process information that got glommed into the /proc tree should have moved to /sys by now, but historical inertia has kept a lot of stuff in /proc

Sysfs - a RAM based file system. (it only exists in RAM, not on harddisk)This is how programs talk to the Linux kernel and modules/drivers (take inputs from the user space to control run-time (non permanent) settings).By default, sysfs is compiled in the Linux kernel.It is designed to export the kernel data structures and their attributes from the kernel to the user space, which then avoids cluttering the /proc file system.The advantages of sysfs over procfs are as follows:A cleaner, well-documented programming interface.Automatic clean-up of directories and files, when the device is removed from the systemThe enforced one item per file rule, which makes for a cleaner user interface.The one item per file rule mandates that in each file of sysfs, there will be only one value that can be put in or read from it. This feature really makes it a cleaner interface.

https://dwaves.de/2017/05/29/linux-difference-between-proc-sys-and-dev-sysfs/


/proc/bus/input/devices-input devices directory.one of the outputs:/sys/devices/pci0000:00/0000:00:14.0/usb3/3-3/3-3.4/3-3.4:1.2/0003:2965:5023.0006/input/input7 =>/sys/ is the mountpoint of the sysfs filesystem (see the output of mount | grep sysfs)./devices/ contains a filesystem representation of the device tree (source)./pci0000:00/ describes the PCI domain and the bus number. In this case, the domain number is 0000 and the bus number is 00 (source)./0000:00:14.0/ has the the PCI domain and bus number repeated, along with the slot and function. In this case, the USB device's slot number is 14 and its function number is 0 (source)./usb3/ refers to USB controller attached to bus number 3 (source)./3-3/3-3.4/3-3.4:1.2/ has redundant information. The last /3-3.4:1.2/ means you are referring to the USB controller attached to bus 3, port 3, port 4, configuration number 1 and interface number 2 (source).
/0003:2965:5023.0006/ means the device is attached to bus 0003, has a vendor ID of 2965, and a product ID of 5023.

/sys/bus/pci/devices/-pci devices directory
/sys/module/directory-built in modules directory

#usr
/usr/lib - libraries for the normal user-programs, that mostly can be found under /usr.
/usr/local/lib - libraries for locally installed programs and packages ie. things you've compiled and installed from source-packages yourself.
/https://superuser.com/questions/1352571/what-is-the-difference-between-usr-lib-usr-local-lib-and-usr-lib-x86-64-linux
------------------------------------------------
lscpi						->list pci devices.The first few bits of the lspci output show the PCI bus id for this device, 06:04.0. That is the value we will use when looking through sysfs in order to find out more information about this device.The kernel numbers PCI devices with a leading 0000: that does not show up in the output of the lspci program.Like PCI drivers, USB drivers also tell the kernel what devices they support in order for the kernel to bind the driver to the device.Now that we know the vendor and product ID for this PCI device, we need to find the proper kernel driver that advertises that it supports this device. Go back to the kernel source directory and look for pci vendor id in the directory 'include/linux/pci_ids.h'.after "cd /sys/bus/pci/devices/
" type "cd 0000:06:04.0" (06:04.0 is a part of the content in the sys/bus/pci/devices/).then "cat device" returns device id.finding proper driver for pci and usb devices begins with finding out their vendor and device id(by knowing pci bus id for pci devices from lspci and loooking for it in sysfs,for usb type lsusb before removing and after inserting the usb) and then in kernel tree search for the id.for root filesystem  device it is needed to provide logic device(by finding device from "mount | grep " / "" and then we figure out logical device for the device.in this case it is sda) and in sys we can find the driver
grep -i					->search with insensitive case for substring in a path
grep -r					->search for text in a  path
grep -R					->search for files under each directory
grep -w					->search for the same text in the directory 
grep -c					->return the count of the word in the path 
grep -n					->return the line numbers containing the pattern
mount | grep " / "				->return filesystem root filesystem uses and block device root filesystem is mounted
ls -l /sys/block/sda				->return logical device that controls sda block device.Drivers for this are in sysfs
ls -l /sys/<previous cmd output:devices...->	->return driver that controls the block device stated in the previous command.(SCSI disk controller driver is responsible).if there is no any result then we delete last part of the previous cmd output(if needed again it is deleted)






